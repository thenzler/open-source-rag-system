name: Security Scans

on:
  schedule:
    - cron: '0 6 * * *'  # Daily security scans at 6 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'core/**'
      - 'Dockerfile'

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-security:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if Dockerfile exists
      id: dockerfile-check
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build Docker image for scanning
      if: steps.dockerfile-check.outputs.dockerfile == 'true'
      run: |
        echo "FROM python:3.11-slim" > Dockerfile.temp
        echo "WORKDIR /app" >> Dockerfile.temp
        echo "COPY requirements.txt ." >> Dockerfile.temp
        echo "RUN pip install -r requirements.txt" >> Dockerfile.temp
        echo "COPY . ." >> Dockerfile.temp
        echo "CMD [\"python\", \"-m\", \"uvicorn\", \"core.main:app\", \"--host\", \"0.0.0.0\"]" >> Dockerfile.temp
        docker build -f Dockerfile.temp -t rag-system:scan .
    
    - name: Run Trivy vulnerability scanner
      if: steps.dockerfile-check.outputs.dockerfile == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'rag-system:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  snyk-security:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && vars.SNYK_TOKEN != ''
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=deployment/requirements/simple_requirements.txt
      continue-on-error: true
    
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always() && hashFiles('snyk.sarif') != ''
      with:
        sarif_file: snyk.sarif

  osv-scanner:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run OSV-Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --skip-git
          .
        format: sarif
        output: osv-results.sarif
    
    - name: Upload OSV scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: osv-results.sarif

  security-summary:
    runs-on: ubuntu-latest
    needs: [codeql, secret-scan, container-security, snyk-security, osv-scanner]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Snyk Security | ${{ needs.snyk-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| OSV Scanner | ${{ needs.osv-scanner.result }} |" >> $GITHUB_STEP_SUMMARY