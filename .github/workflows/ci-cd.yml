name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Basic Tests
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_ragdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api-gateway/requirements.txt
          pip install -r services/api-gateway/requirements-test.txt

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 2; done'

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_ragdb
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd services/api-gateway && python -m pytest tests/unit/ -v --cov=app --cov-report=xml

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_ragdb
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd services/api-gateway && python -m pytest tests/integration/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/api-gateway/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Code Quality (optional, only run if dev dependencies exist)
  quality-check:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api-gateway/requirements.txt
          if [ -f services/api-gateway/requirements-dev.txt ]; then
            pip install -r services/api-gateway/requirements-dev.txt
          fi

      - name: Code formatting check
        continue-on-error: true
        run: |
          if command -v black &> /dev/null; then
            black --check services/api-gateway/app/ || echo "Black formatting check failed"
          fi
          if command -v isort &> /dev/null; then
            isort --check-only services/api-gateway/app/ || echo "Isort check failed"
          fi

      - name: Linting
        continue-on-error: true
        run: |
          if command -v flake8 &> /dev/null; then
            flake8 services/api-gateway/app/ || echo "Flake8 linting failed"
          fi

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/web-interface/package-lock.json

      - name: Install dependencies
        run: |
          cd services/web-interface
          npm ci

      - name: Run tests
        run: |
          cd services/web-interface
          npm test -- --coverage --watchAll=false

      - name: Build frontend
        run: |
          cd services/web-interface
          npm run build

  # Build Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, frontend-test]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        service: [api-gateway, web-interface]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    
    steps:
      - name: Cleanup
        run: |
          echo "Build completed. Status: ${{ needs.build.result }}"
