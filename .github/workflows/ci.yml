name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Create test databases
      run: |
        mkdir -p data
        touch data/test_rag_database.db
        touch data/test_audit.db
    
    - name: Run security linting
      run: |
        pip install bandit safety
        bandit -r core/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Run tests with coverage
      env:
        DATABASE_PATH: data/test_rag_database.db
        AUDIT_DATABASE_PATH: data/test_audit.db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: true
      run: |
        pytest tests/ --cov=core --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Run Black (code formatting)
      run: black --check --diff core/ tests/
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff core/ tests/
    
    - name: Run flake8 (style guide)
      run: flake8 core/ tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run mypy (type checking)
      run: mypy core/ --ignore-missing-imports

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/rag-system:latest
          ${{ secrets.DOCKER_USERNAME }}/rag-system:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deployment would happen here"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/rag-system:${{ github.sha }}"
    
    - name: Run health checks
      run: |
        echo "Health checks would run here"
        # curl -f http://staging.rag-system.com/health || exit 1
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment notification would be sent here"